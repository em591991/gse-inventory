# Generated by Django 5.2.7 on 2025-10-28 23:51

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0002_initial'),
        ('orders', '0005_add_fulfillment_date'),
        ('vendoritems', '0003_delete_vendoritempricehistory'),
        ('vendors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RFQ',
            fields=[
                ('rfq_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rfq_number', models.CharField(help_text='Format: RFQ-YYYY-Q-###', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Purpose/description of this RFQ')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Vendors'), ('QUOTED', 'Quotes Received'), ('COMPLETED', 'Completed (POs Created)'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When RFQ was sent to vendors', null=True)),
                ('quote_deadline', models.DateField(blank=True, help_text='Vendor quote deadline', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this RFQ', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rfqs_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rfqs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReplenishmentOrder',
            fields=[
                ('replenishment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('FINALIZED', 'Finalized'), ('POS_CREATED', 'POs Created')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('finalized_at', models.DateTimeField(blank=True, help_text='When selections were finalized', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created replenishment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replenishment_orders', to=settings.AUTH_USER_MODEL)),
                ('rfq', models.ForeignKey(help_text='Source RFQ', on_delete=django.db.models.deletion.CASCADE, related_name='replenishment_orders', to='rfqs.rfq')),
            ],
            options={
                'db_table': 'replenishment_orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RFQLine',
            fields=[
                ('rfq_line_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('line_no', models.IntegerField(help_text='Line number within RFQ')),
                ('qty_requested', models.DecimalField(decimal_places=3, help_text='Quantity requested', max_digits=12)),
                ('notes', models.TextField(blank=True, help_text='Special requirements, notes')),
                ('item', models.ForeignKey(help_text='Item being requested', on_delete=django.db.models.deletion.PROTECT, related_name='rfq_lines', to='inventory.item')),
                ('rfq', models.ForeignKey(help_text='Parent RFQ', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='rfqs.rfq')),
                ('uom', models.ForeignKey(help_text='Unit of measure', on_delete=django.db.models.deletion.PROTECT, related_name='rfq_lines', to='inventory.unitofmeasure')),
            ],
            options={
                'db_table': 'rfq_lines',
                'ordering': ['rfq', 'line_no'],
            },
        ),
        migrations.CreateModel(
            name='RFQVendor',
            fields=[
                ('rfq_vendor_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Response'), ('QUOTED', 'Quote Received'), ('DECLINED', 'Declined to Quote'), ('NO_RESPONSE', 'No Response')], default='PENDING', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When RFQ was sent to this vendor', null=True)),
                ('responded_at', models.DateTimeField(blank=True, help_text='When vendor responded', null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Vendor contact email at time of RFQ', max_length=254)),
                ('contact_name', models.CharField(blank=True, help_text='Vendor contact name', max_length=255)),
                ('rfq', models.ForeignKey(help_text='Parent RFQ', on_delete=django.db.models.deletion.CASCADE, related_name='rfq_vendors', to='rfqs.rfq')),
                ('vendor', models.ForeignKey(help_text='Vendor who received this RFQ', on_delete=django.db.models.deletion.CASCADE, related_name='rfqs_received', to='vendors.vendor')),
            ],
            options={
                'db_table': 'rfq_vendors',
            },
        ),
        migrations.CreateModel(
            name='VendorQuote',
            fields=[
                ('quote_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price_each', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=12)),
                ('qty_available', models.DecimalField(decimal_places=3, help_text='Quantity available from vendor', max_digits=12)),
                ('lead_time_days', models.IntegerField(blank=True, help_text='Lead time in days', null=True)),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer name', max_length=255)),
                ('manufacturer_part_number', models.CharField(blank=True, help_text='Manufacturer part number', max_length=255)),
                ('vendor_part_number', models.CharField(blank=True, help_text="Vendor's part number", max_length=255)),
                ('quoted_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When quote was received')),
                ('valid_until', models.DateField(blank=True, help_text='Quote expiration date', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes from vendor')),
                ('is_selected', models.BooleanField(default=False, help_text='Whether this quote was selected for ordering')),
                ('rfq_line', models.ForeignKey(help_text='RFQ line this quote is for', on_delete=django.db.models.deletion.CASCADE, related_name='vendor_quotes', to='rfqs.rfqline')),
                ('vendor', models.ForeignKey(help_text='Vendor providing the quote', on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to='vendors.vendor')),
                ('vendor_item', models.ForeignKey(blank=True, help_text='Link to vendor catalog item if exists', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quotes', to='vendoritems.vendoritem')),
            ],
            options={
                'db_table': 'vendor_quotes',
            },
        ),
        migrations.CreateModel(
            name='ReplenishmentLine',
            fields=[
                ('replenishment_line_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('qty_to_order', models.DecimalField(decimal_places=3, help_text='Quantity to order from this vendor (may be less than requested for splits)', max_digits=12)),
                ('purchase_order', models.ForeignKey(blank=True, help_text='Purchase order created from this selection', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replenishment_lines', to='orders.order')),
                ('replenishment', models.ForeignKey(help_text='Parent replenishment order', on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='rfqs.replenishmentorder')),
                ('rfq_line', models.ForeignKey(help_text='Source RFQ line', on_delete=django.db.models.deletion.CASCADE, related_name='replenishment_lines', to='rfqs.rfqline')),
                ('selected_vendor_quote', models.ForeignKey(help_text='Selected vendor quote', on_delete=django.db.models.deletion.PROTECT, related_name='replenishment_selections', to='rfqs.vendorquote')),
            ],
            options={
                'db_table': 'replenishment_lines',
                'ordering': ['replenishment', 'rfq_line'],
            },
        ),
        migrations.AddIndex(
            model_name='rfq',
            index=models.Index(fields=['rfq_number'], name='idx_rfq_number'),
        ),
        migrations.AddIndex(
            model_name='rfq',
            index=models.Index(fields=['status'], name='idx_rfq_status'),
        ),
        migrations.AddIndex(
            model_name='rfq',
            index=models.Index(fields=['created_at'], name='idx_rfq_created'),
        ),
        migrations.AddIndex(
            model_name='replenishmentorder',
            index=models.Index(fields=['rfq'], name='idx_repl_rfq'),
        ),
        migrations.AddIndex(
            model_name='replenishmentorder',
            index=models.Index(fields=['status'], name='idx_repl_status'),
        ),
        migrations.AddIndex(
            model_name='rfqline',
            index=models.Index(fields=['rfq', 'line_no'], name='idx_rfq_line'),
        ),
        migrations.AddIndex(
            model_name='rfqline',
            index=models.Index(fields=['item'], name='idx_rfq_line_item'),
        ),
        migrations.AlterUniqueTogether(
            name='rfqline',
            unique_together={('rfq', 'line_no')},
        ),
        migrations.AddIndex(
            model_name='rfqvendor',
            index=models.Index(fields=['rfq'], name='idx_rfqv_rfq'),
        ),
        migrations.AddIndex(
            model_name='rfqvendor',
            index=models.Index(fields=['vendor'], name='idx_rfqv_vendor'),
        ),
        migrations.AddIndex(
            model_name='rfqvendor',
            index=models.Index(fields=['status'], name='idx_rfqv_status'),
        ),
        migrations.AlterUniqueTogether(
            name='rfqvendor',
            unique_together={('rfq', 'vendor')},
        ),
        migrations.AddIndex(
            model_name='vendorquote',
            index=models.Index(fields=['rfq_line'], name='idx_vq_rfq_line'),
        ),
        migrations.AddIndex(
            model_name='vendorquote',
            index=models.Index(fields=['vendor'], name='idx_vq_vendor'),
        ),
        migrations.AddIndex(
            model_name='vendorquote',
            index=models.Index(fields=['quoted_at'], name='idx_vq_quoted'),
        ),
        migrations.AlterUniqueTogether(
            name='vendorquote',
            unique_together={('rfq_line', 'vendor')},
        ),
        migrations.AddIndex(
            model_name='replenishmentline',
            index=models.Index(fields=['replenishment'], name='idx_repl_line_repl'),
        ),
        migrations.AddIndex(
            model_name='replenishmentline',
            index=models.Index(fields=['rfq_line'], name='idx_repl_line_rfq'),
        ),
        migrations.AddIndex(
            model_name='replenishmentline',
            index=models.Index(fields=['purchase_order'], name='idx_repl_line_po'),
        ),
    ]
